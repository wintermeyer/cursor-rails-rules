---
description: Standards for Rails 8 project configuration and development.
globs: app/**/*.{rb,erb,haml}, config/**/*.rb, lib/**/*.rb
---
## Ruby Configuration

1. Version and Features
```ruby
# .ruby-version
3.4.1

# Gemfile
ruby "3.4.1"
```

2. Modern Ruby Features
- Use pattern matching for complex conditionals
- Use endless methods for single-line definitions
- Use numbered parameters for simple blocks
- Leverage Ruby 3.4 syntax improvements

## Rails Configuration

1. Core Components
```ruby
# config/application.rb
config.load_defaults 8.0
config.autoloader = :zeitwerk
config.active_record.encryption.primary_key = ENV["DB_ENCRYPTION_KEY"]
config.active_record.encryption.deterministic_key = ENV["DB_DETERMINISTIC_KEY"]
config.active_record.encryption.key_derivation_salt = ENV["DB_KEY_DERIVATION_SALT"]
```

2. Asset Pipeline (Propshaft)
```ruby
# config/initializers/propshaft.rb
Rails.application.config.assets.compile = false
Rails.application.config.assets.prefix = "/assets"
Rails.application.config.assets.digest = true
```

3. JavaScript Management
```ruby
# config/importmap.rb
pin "@hotwired/turbo-rails"
pin "@hotwired/stimulus"
pin "@hotwired/stimulus-loading"
```

4. Background Processing
```ruby
# config/solid_queue.yml
production:
  primary_queue: default
  max_threads: 5
  poll_interval: 0.1
```

5. Caching Configuration
```ruby
# config/solid_cache.yml
production:
  driver: redis
  url: <%= ENV["REDIS_URL"] %>
  namespace: cache
```

## Development Standards

1. Code Organization
- Follow Rails directory structure
- Use concerns for shared functionality
- Keep controllers skinny
- Use service objects for complex operations

2. Database
- Use strong migrations
- Follow naming conventions

3. Testing
```ruby
# test/test_helper.rb
class ActiveSupport::TestCase
  include FactoryBot::Syntax::Methods
  parallelize(workers: :number_of_processors)
end

class ApplicationSystemTestCase < ActionDispatch::SystemTestCase
  driven_by :selenium, using: :headless_chrome
end
```

4. Frontend
- Use Turbo for SPA-like features
- Use Stimulus for JavaScript behavior
- Use Import Maps for JS dependencies
- Use Tailwind CSS for styling

## Performance

1. Database Optimization
- Use database indexes
- Implement query caching
- Use counter caches
- Optimize N+1 queries

2. Caching Strategy
```ruby
# app/controllers/application_controller.rb
class ApplicationController < ActionController::Base
  etag { current_user&.id }
  etag { flash }
  etag { current_user&.last_modified_at }
end
```

3. Background Jobs
- Use SolidQueue for job processing
- Set appropriate priorities
- Handle job failures
- Monitor job queues

4. Asset Optimization
- Use asset compression
- Enable CDN support
- Implement lazy loading
- Optimize image delivery

## Deployment

1. Configuration
```ruby
# config/environments/production.rb
config.public_file_server.enabled = ENV["RAILS_SERVE_STATIC_FILES"].present?
config.force_ssl = true
config.log_level = :info
config.cache_classes = true
config.eager_load = true
```

2. Environment Variables
```yaml
# .env.example
RAILS_MAX_THREADS=5
WEB_CONCURRENCY=3
RAILS_LOG_TO_STDOUT=true
RAILS_SERVE_STATIC_FILES=true
DATABASE_URL=postgresql://localhost/myapp
REDIS_URL=redis://localhost:6379/1
```

3. Monitoring
- Use health check endpoints
- Implement error tracking
- Set up performance monitoring
- Configure logging

4. Maintenance
- Regular security updates
- Database maintenance
- Cache cleanup
- Log rotation 
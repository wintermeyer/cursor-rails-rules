---
description: Page Availability Testing Rule
globs: 
---

# Page Availability Testing Rule

## Overview

This rule enforces the creation of integration tests that verify the HTTP status code (200 OK) for all new pages in a Rails application. This helps ensure that basic page routing and authorization are working correctly.

## Rule Details

For each new page or route added to the application, a corresponding integration test must be created that:
1. Visits the page
2. Verifies the HTTP status code is 200 (OK)
3. Includes any necessary authentication setup

## Examples

### Good Examples

```ruby
# test/integration/pages_test.rb
require "test_helper"

class PagesTest < ActionDispatch::IntegrationTest
  test "should get home page" do
    get root_path
    assert_response :success
  end

  test "should get about page" do
    get about_path
    assert_response :success
  end
end

# For authenticated pages
class DashboardTest < ActionDispatch::IntegrationTest
  setup do
    @user = users(:one)
    sign_in @user
  end

  test "should get dashboard" do
    get dashboard_path
    assert_response :success
  end
end
```

### Bad Examples

```ruby
# Missing page availability test
class DashboardController < ApplicationController
  def index
    # ... code ...
  end
end

# No test file created
```

## Configuration

No additional configuration required. This rule works with Rails' default testing framework.

## When to Use

- When adding new pages or routes to your application
- When implementing new controller actions that render views
- When adding authenticated sections to your application

## Benefits

- Early detection of routing issues
- Verification of basic authorization setup
- Documentation of expected page availability
- Prevention of accidental route breakage

## Implementation Guide

1. Create an integration test file for your controller:
```ruby
rails generate integration_test your_controller_name
```

2. Add a test for each page:
```ruby
require "test_helper"

class YourControllerTest < ActionDispatch::IntegrationTest
  test "should get page_name" do
    # Setup if needed (e.g., authentication)
    get page_path
    assert_response :success
  end
end
```

## Common Issues and Solutions

### Authentication Required

If the page requires authentication:
```ruby
setup do
  @user = users(:one)  # Use your fixture/factory
  sign_in @user        # Use your authentication method
end
```

### Different Response Codes

If you expect a different response code (e.g., for unauthorized access):
```ruby
test "should redirect unauthorized user" do
  get admin_path
  assert_response :redirect
  assert_redirected_to new_user_session_path
end
```

## Related Rules

- [Testing Base Rules](mdc:base.mdc)
- [System Testing Rules](mdc:system.mdc)
- [Quality Testing Rules](mdc:quality.mdc)

## References

- [Rails Testing Guide](mdc:https:/guides.rubyonrails.org/testing.html)
- [Integration Testing](mdc:https:/guides.rubyonrails.org/testing.html#integration-testing)
- [Rails Status Codes](mdc:https:/guides.rubyonrails.org/layouts_and_rendering.html#the-status-option) 
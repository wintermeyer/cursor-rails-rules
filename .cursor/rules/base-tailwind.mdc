---
description: Tailwind CSS Standards
globs: app/views/**/*.{erb,haml}, app/components/**/*.{erb,haml}, app/helpers/**/*.rb
---
## Configuration

1. Setup
```ruby
# config/tailwind.config.js
module.exports = {
  content: [
    './app/views/**/*.{erb,haml}',
    './app/components/**/*.{erb,haml,rb}',
    './app/helpers/**/*.rb',
    './app/javascript/**/*.js'
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#f0f9ff',
          500: '#0ea5e9',
          900: '#0c4a6e'
        }
      }
    }
  },
  plugins: [
    require('@tailwindcss/forms'),
    require('@tailwindcss/typography'),
    require('@tailwindcss/aspect-ratio')
  ]
}
```

## Class Organization

1. Component Structure
```erb
<%# Good: Organized class structure %>
<div class="
  block
  rounded-lg
  bg-white
  p-6
  shadow-lg
  hover:shadow-xl
  dark:bg-gray-800
  sm:p-8
  md:flex
  lg:p-10
">
  Content
</div>

<%# Bad: Unorganized classes %>
<div class="p-6 hover:shadow-xl dark:bg-gray-800 block rounded-lg shadow-lg sm:p-8 bg-white md:flex lg:p-10">
  Content
</div>
```

2. Class Order
- Layout Properties (display, position)
- Box Model (margin, padding, width)
- Visual (background, border)
- Typography
- Other (cursor, user-select)
- Responsive Modifiers
- State Modifiers

## Responsive Design

1. Breakpoint Usage
```erb
<div class="
  w-full
  space-y-4
  md:space-y-0
  md:space-x-4
  md:flex
">
  <div class="w-full md:w-1/2">
    Left Content
  </div>
  <div class="w-full md:w-1/2">
    Right Content
  </div>
</div>
```

2. Mobile-First Approach
```erb
<%# Good: Mobile-first design %>
<nav class="
  fixed
  bottom-0
  w-full
  bg-white
  md:relative
  md:top-0
">
  Navigation Content
</nav>

<%# Bad: Desktop-first design %>
<nav class="
  relative
  top-0
  w-full
  bg-white
  sm:fixed
  sm:bottom-0
">
  Navigation Content
</nav>
```

## Component Patterns

1. Button Styles
```erb
<%# Primary Button %>
<%= button_to "Submit",
    submit_path,
    class: "
      inline-flex
      items-center
      justify-center
      rounded-md
      bg-indigo-600
      px-3
      py-2
      text-sm
      font-semibold
      text-white
      shadow-sm
      hover:bg-indigo-500
      focus-visible:outline
      focus-visible:outline-2
      focus-visible:outline-offset-2
      focus-visible:outline-indigo-600
    "
%>

<%# Secondary Button %>
<%= link_to "Cancel",
    root_path,
    class: "
      inline-flex
      items-center
      justify-center
      rounded-md
      bg-white
      px-3
      py-2
      text-sm
      font-semibold
      text-gray-900
      shadow-sm
      ring-1
      ring-inset
      ring-gray-300
      hover:bg-gray-50
    "
%>
```

2. Form Elements
```erb
<%# Form Group %>
<div class="space-y-2">
  <%= form.label :email,
      class: "
        block
        text-sm
        font-medium
        leading-6
        text-gray-900
      "
  %>
  
  <%= form.email_field :email,
      class: "
        block
        w-full
        rounded-md
        border-0
        py-1.5
        text-gray-900
        shadow-sm
        ring-1
        ring-inset
        ring-gray-300
        placeholder:text-gray-400
        focus:ring-2
        focus:ring-inset
        focus:ring-indigo-600
        sm:text-sm
        sm:leading-6
      "
  %>
  
  <% if @user.errors[:email].any? %>
    <p class="
      mt-2
      text-sm
      text-red-600
    ">
      <%= @user.errors[:email].first %>
    </p>
  <% end %>
</div>
```

## Dark Mode

1. Implementation
```erb
<%# Good: Consistent dark mode support %>
<div class="
  bg-white
  text-gray-900
  dark:bg-gray-800
  dark:text-gray-100
">
  <h1 class="
    text-gray-900
    dark:text-white
  ">
    Title
  </h1>
  <p class="
    text-gray-600
    dark:text-gray-300
  ">
    Content
  </p>
</div>
```

2. Color Patterns
```erb
<%# Background Colors %>
<div class="
  bg-white
  dark:bg-gray-900
">
  <%# Text Colors %>
  <p class="
    text-gray-900
    dark:text-gray-100
  ">
    Content
  </p>
  
  <%# Border Colors %>
  <div class="
    border
    border-gray-200
    dark:border-gray-700
  ">
    Border Content
  </div>
</div>
```

## Accessibility

1. Interactive Elements
```erb
<%# Good: Accessible button %>
<button
  type="button"
  class="
    rounded-md
    bg-indigo-600
    px-3
    py-2
    text-sm
    font-semibold
    text-white
    shadow-sm
    hover:bg-indigo-500
    focus-visible:outline
    focus-visible:outline-2
    focus-visible:outline-offset-2
    focus-visible:outline-indigo-600
  "
  aria-label="Close menu"
>
  <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
  </svg>
</button>
```

2. Focus States
```erb
<%# Good: Visible focus states %>
<a
  href="#"
  class="
    text-indigo-600
    underline
    focus:outline-none
    focus:ring-2
    focus:ring-indigo-500
    focus:ring-offset-2
  "
>
  Link Text
</a>
```

## Performance

1. Component Extraction
```ruby
# app/components/button_component.rb
class ButtonComponent < ViewComponent::Base
  def initialize(variant: :primary)
    @variant = variant
  end
  
  private
  
  def classes
    case @variant
    when :primary
      "inline-flex items-center justify-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
    when :secondary
      "inline-flex items-center justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
    end
  end
end
```

2. Helper Methods
```ruby
# app/helpers/tailwind_helper.rb
module TailwindHelper
  def form_input_classes
    "block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
  end
  
  def form_label_classes
    "block text-sm font-medium leading-6 text-gray-900"
  end
end
```

## Maintenance

1. Class Extraction
- Use components for repeated patterns
- Create helpers for common class combinations
- Document custom utilities
- Keep class organization consistent

2. Updates
- Regular Tailwind CSS updates
- Plugin maintenance
- Class usage audits
- Performance monitoring 
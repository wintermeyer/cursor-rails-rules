---
description: System Testing Standards
globs: test/system/**/*.rb
---
# System Testing Standards

Standards for system testing in Rails 8.

## Configuration

1. Test Helper Setup
```ruby
# test/application_system_test_case.rb
require "test_helper"

class ApplicationSystemTestCase < ActionDispatch::SystemTestCase
  driven_by :selenium, using: :headless_chrome, screen_size: [1400, 1400]
  
  # Helper methods for system tests
  def sign_in_as(user)
    visit new_user_session_path
    fill_in "Email", with: user.email
    fill_in "Password", with: user.password
    click_button "Sign in"
    assert_current_path root_path
  end
  
  def take_failed_screenshot
    super
    Capybara.save_page
  end
end
```

## Test Organization

1. Directory Structure
```
test/system/
├── authentication/
│   ├── sign_in_test.rb
│   └── sign_up_test.rb
├── dashboard/
│   ├── navigation_test.rb
│   └── widgets_test.rb
└── admin/
    ├── users_test.rb
    └── settings_test.rb
```

## Best Practices

1. Authentication Testing
```ruby
require "application_system_test_case"

class SignInTest < ApplicationSystemTestCase
  test "user can sign in with valid credentials" do
    user = create(:user)
    
    visit new_user_session_path
    fill_in "Email", with: user.email
    fill_in "Password", with: user.password
    click_button "Sign in"
    
    assert_current_path root_path
    assert_text "Signed in successfully"
  end
  
  test "user cannot sign in with invalid credentials" do
    visit new_user_session_path
    fill_in "Email", with: "invalid@example.com"
    fill_in "Password", with: "wrongpassword"
    click_button "Sign in"
    
    assert_current_path new_user_session_path
    assert_text "Invalid email or password"
  end
end
```

2. Form Testing
```ruby
require "application_system_test_case"

class UsersTest < ApplicationSystemTestCase
  test "creating a new user" do
    visit new_user_path
    
    fill_in "First name", with: "John"
    fill_in "Last name", with: "Doe"
    fill_in "Email", with: "john@example.com"
    fill_in "Password", with: "password123"
    fill_in "Password confirmation", with: "password123"
    
    assert_difference "User.count" do
      click_button "Create User"
    end
    
    assert_text "User was successfully created"
  end
  
  test "updating a user" do
    user = create(:user)
    sign_in_as(user)
    
    visit edit_user_path(user)
    fill_in "First name", with: "Updated"
    click_button "Update User"
    
    assert_text "User was successfully updated"
    assert_equal "Updated", user.reload.first_name
  end
end
```

3. JavaScript Interactions
```ruby
require "application_system_test_case"

class DashboardTest < ApplicationSystemTestCase
  test "toggling sidebar" do
    sign_in_as create(:user)
    
    assert_selector "#sidebar", visible: true
    click_button "Toggle Sidebar"
    assert_selector "#sidebar", visible: false
  end
  
  test "dynamic content loading" do
    sign_in_as create(:user)
    
    click_button "Load More"
    assert_selector ".loading-spinner"
    assert_selector ".content-item", count: 20
  end
end
```

4. File Upload Testing
```ruby
require "application_system_test_case"

class DocumentsTest < ApplicationSystemTestCase
  test "uploading a document" do
    sign_in_as create(:user)
    visit new_document_path
    
    attach_file "Document", file_fixture("test.pdf")
    fill_in "Title", with: "Test Document"
    
    assert_difference "Document.count" do
      click_button "Upload"
    end
    
    assert_text "Document was successfully uploaded"
  end
  
  test "drag and drop upload" do
    sign_in_as create(:user)
    visit documents_path
    
    drop_file "#dropzone", file_fixture("test.pdf")
    assert_selector ".upload-preview"
    assert_text "test.pdf"
  end
end
```

## Common Patterns

1. Modal Testing
```ruby
require "application_system_test_case"

class ModalTest < ApplicationSystemTestCase
  test "opening and closing modal" do
    sign_in_as create(:user)
    
    click_button "Open Modal"
    assert_selector "#modal", visible: true
    
    within "#modal" do
      assert_text "Modal Title"
      click_button "Close"
    end
    
    assert_selector "#modal", visible: false
  end
end
```

2. Table Interactions
```ruby
require "application_system_test_case"

class TableTest < ApplicationSystemTestCase
  test "sorting table columns" do
    sign_in_as create(:user)
    visit users_path
    
    click_link "Name"
    assert_selector "th.sorted-asc", text: "Name"
    
    click_link "Name"
    assert_selector "th.sorted-desc", text: "Name"
  end
  
  test "filtering table data" do
    sign_in_as create(:user)
    visit users_path
    
    fill_in "Search", with: "john"
    click_button "Filter"
    
    assert_selector "tbody tr", count: 1
    assert_text "John Doe"
  end
end
```

3. Multi-step Forms
```ruby
require "application_system_test_case"

class RegistrationTest < ApplicationSystemTestCase
  test "completing multi-step registration" do
    visit new_registration_path
    
    # Step 1: Basic Info
    fill_in "Email", with: "user@example.com"
    fill_in "Password", with: "password123"
    click_button "Next"
    
    # Step 2: Profile
    fill_in "First name", with: "John"
    fill_in "Last name", with: "Doe"
    click_button "Next"
    
    # Step 3: Preferences
    check "Subscribe to newsletter"
    click_button "Complete Registration"
    
    assert_text "Registration completed successfully"
    assert_current_path dashboard_path
  end
end
```

4. Real-time Features
```ruby
require "application_system_test_case"

class ChatTest < ApplicationSystemTestCase
  test "sending and receiving messages" do
    user = create(:user)
    sign_in_as user
    visit chat_room_path
    
    # Send message
    fill_in "Message", with: "Hello, world!"
    click_button "Send"
    
    # Verify message appears
    assert_selector ".message", text: "Hello, world!"
    
    # Simulate receiving message
    perform_enqueued_jobs do
      ChatChannel.broadcast_to(
        "chat_room",
        { content: "Hi there!", sender: "Other User" }
      )
    end
    
    assert_selector ".message", text: "Hi there!"
  end
end
``` 